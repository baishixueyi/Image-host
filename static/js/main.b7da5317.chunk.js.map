{"version":3,"sources":["components/Header.js","components/Footer.js","components/Loading.js","App.js","serviceWorker.js","index.js","models/index.js","stores/user.js","stores/image.js","stores/history.js","stores/auth.js","stores/index.js","components/logo.svg"],"names":["Header","styled","header","Logostyle","img","StyleLink","NavLink","Login","div","StyleButton","Button","Component","observer","useStore","AuthStore","userStore","history","useHistory","useEffect","pullUser","src","Logo","to","activeClassName","exact","currentUser","attributes","username","type","onClick","console","log","Logout","push","Footer","footer","Loading","Home","lazy","History","About","Register","Notfound","App","fallback","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message","AV","init","appId","appKey","serverURL","servelApi","password","user","User","setUsername","setPassword","Promise","resolve","reject","signUp","loginUser","logIn","logOut","current","Uploader","file","filename","item","Object","avFile","File","set","save","fileInfo","page","pagesize","query","Query","equalTo","descending","limit","skip","find","listData","this","observable","action","newFilename","newFile","isUploading","serverFile","err","finally","newList","list","concat","isLoading","append","length","hasMore","values","res","isLogin","resetUser","imageStore","reset","historyStore","context","createContext","useContext","module","exports"],"mappings":"uTAQMA,EAASC,IAAOC,OAAV,gHAMNC,EAAYF,IAAOG,IAAV,0CAGTC,EAAYJ,YAAOK,IAAPL,CAAH,mMAWTM,EAAQN,IAAOO,IAAV,oEAILC,EAAcR,YAAOS,IAAPT,CAAH,oLA6CFU,EApCGC,aAAS,WACvB,MAAiCC,cAAzBC,EAAR,EAAQA,UAAUC,EAAlB,EAAkBA,UACZC,EAAUC,cAchB,OAHAC,qBAAU,WACNH,EAAUI,aACZ,IAEE,kBAACnB,EAAD,KACI,kBAACG,EAAD,CAAWiB,IAAKC,MAChB,6BACI,kBAAChB,EAAD,CAAWiB,GAAG,IAAIC,gBAAgB,SAASC,OAAK,GAAhD,gBACA,kBAACnB,EAAD,CAAWiB,GAAG,WAAWC,gBAAgB,UAAzC,4BACA,kBAAClB,EAAD,CAAWiB,GAAG,SAASC,gBAAgB,UAAvC,uBAEJ,kBAAChB,EAAD,KAEQQ,EAAUU,YAAY,oCAAGV,EAAUU,YAAYC,WAAWC,SAAS,kBAAClB,EAAD,CAAamB,KAAK,UAAUC,QAjB1F,WACjBC,QAAQC,IAAI,gBACZjB,EAAUkB,WAeqE,gBAA7C,KAAqH,oCAAE,kBAACvB,EAAD,CAAamB,KAAK,UAAUC,QAvBrK,WAChBb,EAAQiB,KAAK,YAsB4I,gBAC7I,kBAACxB,EAAD,CAAamB,KAAK,UAAUC,QArBrB,WACnBb,EAAQiB,KAAK,eAoBD,sBCjEdC,EAASjC,IAAOkC,OAAV,+IAcGxB,MANf,WACI,OACI,kBAACuB,EAAD,sKCJOE,MANf,WACI,OACI,4CCYFC,G,OAAOC,gBAAK,kBAAM,+DAClBC,EAAUD,gBAAK,kBAAM,8DACrBE,EAAQF,gBAAK,kBAAM,iCACnB/B,EAAQ+B,gBAAK,kBAAI,+DACjBG,EAAWH,gBAAK,kBAAI,+DACpBI,EAAWJ,gBAAK,kBAAI,yDAwBXK,MArBf,WACE,OACE,oCACE,kBAAC,EAAD,MACA,8BACE,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,OAClB,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIrB,OAAK,GAAC,kBAACa,EAAD,OACtB,kBAAC,IAAD,CAAOQ,KAAK,YAAY,kBAACN,EAAD,OACxB,kBAAC,IAAD,CAAOM,KAAK,UAAU,kBAACL,EAAD,OACtB,kBAAC,IAAD,CAAOK,KAAK,UAAS,kBAAC,EAAD,OACrB,kBAAC,IAAD,CAAOA,KAAK,aAAY,kBAACJ,EAAD,OACxB,kBAAC,IAAD,CAAOI,KAAK,MAAK,kBAACH,EAAD,UAIvB,kBAAC,EAAD,QC7BcI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OACL,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLhC,QAAQgC,MAAMA,EAAMC,a,4IEvI5BC,IAAGC,KAAK,CACJC,MAAO,oCACPC,OAAQ,2BACRC,UAAW,yCAGf,I,8BAAMC,EAAY,SACL1C,EAAS2C,GACd,IAAIC,EAAO,IAAIC,OAGf,OAFAD,EAAKE,YAAY9C,GACjB4C,EAAKG,YAAYJ,GACV,IAAIK,SAAQ,SAACC,EAAQC,GACxBN,EAAKO,SAASpB,MAAK,SAAAqB,GAAS,OAAEH,EAAQG,MAAW,SAAAjB,GAAK,OAAEe,EAAOf,UANrEO,EAAY,SASR1C,EAAS2C,GACX,OAAO,IAAIK,SAAQ,SAACC,EAAQC,GACxBL,OAAKQ,MAAMrD,EAAS2C,GAAUZ,MAAK,SAAAqB,GAAS,OAAEH,EAAQG,MAAW,SAAAjB,GAAK,OAAEe,EAAOf,UAXrFO,EAAY,WAeVG,OAAKS,UAfPZ,EAAY,WAmBV,OADAvC,QAAQC,IAAIyC,OAAKU,WACVV,OAAKU,WAIdC,EAAW,SACTC,EAAKC,GACL,IAAMC,EAAO,IAAItB,IAAGuB,OAAO,SACrBC,EAAS,IAAIxB,IAAGyB,KAAKJ,EAASD,GAIpC,OAHAE,EAAKI,IAAI,WAAWL,GACpBC,EAAKI,IAAI,QAAQlB,OAAKU,WACtBI,EAAKI,IAAI,MAAMF,GACR,IAAIb,SAAQ,SAACC,EAAQC,GACxBS,EAAKK,OAAOjC,MAAK,SAAAkC,GAAQ,OAAEhB,EAAQgB,MAAW/B,OAAM,SAAAC,GAAK,OAAEe,EAAOf,UARxEqB,EAAW,SAWNU,EAAKC,GACR,IAAMC,EAAQ,IAAI/B,IAAGgC,MAAM,SAK3B,OAJAD,EAAME,QAAQ,QAASzB,OAAKU,WAC5Ba,EAAMG,WAAW,aACjBH,EAAMI,MAAML,GACZC,EAAMK,MAAMP,EAAK,GAAGC,GACb,IAAInB,SAAQ,SAACC,EAAQC,GACxBkB,EAAMM,OAAO3C,MAAK,SAAA4C,GAAQ,OAAE1B,EAAQ0B,MAAWzC,OAAM,SAAAC,GAAK,OAAEe,EAAOf,UClChE,M,iIATX,WACIyC,KAAK9E,YAAc4C,M,uBAGvB,WACIkC,KAAK9E,YAAc,S,8CAPtB+E,K,yEAAyB,Q,oCAEzBC,K,0GAIAA,K,yEC0BU,M,8OA3BX,SAAoBC,GAChBH,KAAKlB,SAAWqB,I,qBAEpB,SAAgBC,GACZJ,KAAKnB,KAAOuB,I,oBAEhB,WAAiB,IAAD,OAEZ,OADAJ,KAAKK,aAAc,EACZ,IAAIjC,SAAQ,SAACC,EAAQC,GACxBM,EAAa,EAAKC,KAAK,EAAKC,UAAU3B,MAAK,SAAAkC,GACxChB,EAAQgB,GACR,EAAKiB,WAAajB,KAClB/B,OAAM,SAAAiD,GACLhF,QAAQC,IAAI,4BACZ8C,EAAOiC,MACRC,SAAQ,WACP,EAAKH,aAAc,U,mBAI/B,WACIL,KAAKlB,SAAS,GACdkB,KAAKnB,KAAO,KACZmB,KAAKM,WAAa,S,2CA5BrBL,K,wEAAsB,M,kCACtBA,K,yEAAkB,Q,yCAClBA,K,yEAAyB,K,wCACzBA,K,yEAAwB,Q,uCAExBC,K,2GAGAA,K,sGAGAA,K,oGAcAA,K,8ECQU,M,2LA5BXX,SAAW,G,0CAEX,SAAekB,GACXT,KAAKU,KAAOV,KAAKU,KAAKC,OAAOF,K,kBAGjC,WAAgB,IAAD,OACXT,KAAKY,WAAY,EACjBhC,EAAgBoB,KAAKV,KAAKU,KAAKT,UAAUpC,MAAK,SAAAuD,GAC1C,EAAKG,OAAOH,GACZ,EAAKpB,OACFoB,EAAKI,OAAS,EAAKvB,WAClB,EAAKwB,SAAU,MAEpBzD,OAAM,SAAAC,GACLC,IAAQD,MAAM,+BACfiD,SAAQ,WACP,EAAKI,WAAY,O,mBAIzB,WACIZ,KAAKU,KAAO,GACZV,KAAKY,WAAY,EACjBZ,KAAKV,KAAO,M,uCA5BfW,K,wEAAiB,M,uCACjBA,K,yEAAuB,K,qCACvBA,K,yEAAqB,K,kCACrBA,K,yEAAkB,K,kCAGlBC,K,mGAIAA,K,kGAeAA,K,qECuBU,M,oKAzCX,SAAoB9E,GAChB4E,KAAKgB,OAAO5F,SAAWA,I,yBAG3B,SAAoB2C,GAChBiC,KAAKgB,OAAOjD,SAAWA,I,mBAG3B,WAAgB,IAAD,OAGX,OAFAxC,QAAQC,IAAI,wCACZwE,KAAKY,WAAY,EACV,IAAIxC,SAAQ,SAACC,EAAQC,GACxBR,EAAgB,EAAKkD,OAAO5F,SAAS,EAAK4F,OAAOjD,UAChDZ,MAAK,SAAA8D,GACJzG,EAAUI,WACVyD,EAAQ4C,MACP3D,OAAM,SAAAC,GACLe,EAAOf,W,sBAKnB,WAAmB,IAAD,OAGd,OAFAhC,QAAQC,IAAI,wCACZwE,KAAKY,WAAY,EACV,IAAIxC,SAAQ,SAACC,EAAQC,GACxBR,EAAmB,EAAKkD,OAAO5F,SAAS,EAAK4F,OAAOjD,UAAUZ,MAAK,SAAA8D,GAAG,OAAE5C,EAAQ4C,MAAM3D,OAAM,SAAAC,GAAK,OAAEe,EAAOf,W,oBAKlH,WACIyC,KAAKkB,SAAU,EACf3F,QAAQC,IAAI,sBACZsC,IACAtD,EAAU2G,YACVC,EAAWC,QACXC,EAAaD,Y,4CA1ChBpB,K,yEAAuB,K,oCACvBA,K,wEAAoB,CACjB7E,SAAS,GACT2C,SAAS,O,uCAEZmC,K,+GAIAA,K,yGAIAA,K,sGAcAA,K,uGASAA,K,sECrCCqB,EAAUC,wBAAc,CAC1BjH,YACAC,YACA4G,aACAE,iBAGShH,EAAW,kBAAKmH,qBAAWF,K,mBCbxCG,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.b7da5317.chunk.js","sourcesContent":["import React, { useEffect } from 'react';\nimport Logo from './logo.svg'\nimport { NavLink,useHistory } from 'react-router-dom'\nimport styled from 'styled-components'\nimport { Button } from 'antd'\nimport { observer} from 'mobx-react'\nimport { useStore } from '../stores'\n\nconst Header = styled.header`\ndisplay:flex;\nalign-items:center;\npadding:10px 100px;\nbackground-color:#141414;\n`\nconst Logostyle = styled.img`\nheight:30px;\n`\nconst StyleLink = styled(NavLink)`\n    margin-left:30px;\n    color:#595959;\n    &.active{\n        color:#fff;\n        border-bottom:1px solid #fff;\n    }\n    &:hover{\n        color:#fff;\n    }\n`\nconst Login = styled.div`\n    margin-left:auto;\n    color:#fff;\n`\nconst StyleButton = styled(Button)`\n    margin-left:10px;\n    background:#006d75;\n    border:#006d75;\n    &:hover,&:focus{\n        background:#006d75;\n        border:#006d75;\n    }\n`\nconst Component = observer(()=> {\n    const { AuthStore,userStore }  = useStore()\n    const history = useHistory()\n    const handleLogin = ()=>{\n        history.push('/login')\n    }\n    const handleRegister = ()=>{\n        history.push('/register')\n    }\n    const handleLogout = ()=>{\n        console.log('注销')\n        AuthStore.Logout()\n    }\n    useEffect(()=>{\n        userStore.pullUser()\n    },[])\n    return (\n        <Header>\n            <Logostyle src={Logo} />\n            <nav>\n                <StyleLink to=\"/\" activeClassName=\"active\" exact>首页</StyleLink>\n                <StyleLink to=\"/history\" activeClassName=\"active\">上传历史</StyleLink>\n                <StyleLink to=\"/about\" activeClassName=\"active\">关于我</StyleLink>\n            </nav>\n            <Login>\n                {\n                    userStore.currentUser?<>{userStore.currentUser.attributes.username}<StyleButton type=\"primary\" onClick={handleLogout}>注销</StyleButton> </>:<><StyleButton type=\"primary\" onClick={handleLogin}>登录</StyleButton>\n                    <StyleButton type=\"primary\" onClick={handleRegister}>注册</StyleButton></>\n                }\n                \n            </Login>\n\n        </Header>\n    )\n})\n\nexport default Component;","import React from 'react';\nimport styled from 'styled-components'\n\nconst Footer = styled.footer`\n    background-color:#f5f5f5;\n    color:#595959;\n    text-align:center;\n    font-size:12px;\n    padding:10px;\n`\n\nfunction Component(){\n    return (\n        <Footer>请勿上传违反中国大陆和香港法律的图片，违者后果自负。</Footer>\n    )\n}\n\nexport default Component;","import React from 'react'\n\n\nfunction Loading(){\n    return (\n        <div>Loading...</div>\n    )\n}\n\nexport default Loading","import React, { Suspense, lazy } from 'react';\nimport './App.css';\n\nimport Header from './components/Header'\nimport Footer from './components/Footer'\nimport Loading from './components/Loading'\n\nimport {\n  Switch,\n  Route\n} from 'react-router-dom'\n\nimport 'antd/dist/antd.css';\n// import Home from './pages/Home'\n// import History from './pages/History'\n// import About from './pages/About'\n\nconst Home = lazy(() => import('./pages/Home'))\nconst History = lazy(() => import('./pages/History'))\nconst About = lazy(() => import('./pages/About'))\nconst Login = lazy(()=>import('./pages/Login'))\nconst Register = lazy(()=>import('./pages/Register'))\nconst Notfound = lazy(()=>import('./pages/Notfount'))\n\n\nfunction App() {\n  return (\n    <>\n      <Header />\n      <main>\n        <Suspense fallback={<Loading />}>\n          <Switch>\n            <Route path=\"/\" exact><Home /></Route>\n            <Route path=\"/history\" ><History /></Route>\n            <Route path=\"/about\" ><About /></Route>\n            <Route path=\"/login\"><Login/></Route>\n            <Route path=\"/register\"><Register/></Route>\n            <Route path=\"/*\"><Notfound/></Route>\n          </Switch>\n        </Suspense>\n      </main>\n      <Footer />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport {\n  HashRouter as Router\n} from 'react-router-dom'\n\nReactDOM.render(\n    <Router>\n      <App />\n    </Router>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();","import AV,{User} from 'leancloud-storage';\n\nAV.init({\n    appId: \"f1rxvy1F1sLsQBOwzq98gMfI-gzGzoHsz\",\n    appKey: \"541IAS9xvWN6K7g7SlljmcJ8\",\n    serverURL: \"https://f1rxvy1f.lc-cn-n1-shared.com\"\n  });\n\nconst servelApi = {\n    register(username,password){\n        let user = new User()\n        user.setUsername(username)\n        user.setPassword(password)\n        return new Promise((resolve,reject)=>{\n            user.signUp().then(loginUser=>resolve(loginUser),error=>reject(error))\n        })\n    },\n    login(username,password){\n        return new Promise((resolve,reject)=>{\n            User.logIn(username,password).then(loginUser=>resolve(loginUser),error=>reject(error))\n        })\n    },\n    logout(){\n        User.logOut()\n    },\n    getCurrentUser(){\n        console.log(User.current())\n        return User.current()\n    }\n}\n\nconst Uploader = {\n    add(file,filename){\n        const item = new AV.Object('Image')\n        const avFile = new AV.File(filename,file)\n        item.set('filename',filename)\n        item.set('owner',User.current())\n        item.set('url',avFile)\n        return new Promise((resolve,reject)=>{\n            item.save().then(fileInfo=>resolve(fileInfo)).catch(error=>reject(error))\n        })\n    },\n    select(page,pagesize){\n        const query = new AV.Query('Image')\n        query.equalTo('owner', User.current());\n        query.descending('createdAt');\n        query.limit(pagesize);\n        query.skip((page-1)*pagesize);\n        return new Promise((resolve,reject)=>{\n            query.find().then(listData=>resolve(listData)).catch(error=>reject(error))\n        })\n    }\n}\n\nexport {servelApi,Uploader}\n","import { observable,action } from 'mobx'\nimport {servelApi} from '../models'\n\nclass UserStore {\n    @observable currentUser = null;\n\n    @action pullUser(){\n        this.currentUser = servelApi.getCurrentUser()\n    }\n\n    @action resetUser(){\n        this.currentUser = null\n    }\n}\n\nexport default new UserStore()","import { action, observable } from 'mobx'\nimport { Uploader } from '../models'\n\nclass ImageStore {\n    @observable filename = \"\" \n    @observable file = null\n    @observable isUploading = false\n    @observable serverFile = null\n    \n    @action setFilename(newFilename){\n        this.filename = newFilename\n    }\n    @action setFile(newFile){\n        this.file = newFile\n    }\n    @action upload(){\n        this.isUploading = true\n        return new Promise((resolve,reject)=>{\n            Uploader.add(this.file,this.filename).then(fileInfo=>{\n               resolve(fileInfo) \n               this.serverFile = fileInfo\n            }).catch(err=>{\n                console.log('上传失败')\n                reject(err)\n            }).finally(()=>{\n                this.isUploading = false\n            })\n        })\n    }\n    @action reset(){\n        this.filename=\"\"\n        this.file = null\n        this.serverFile = null\n    }\n}\n\nexport default new ImageStore()","import { observable,action } from 'mobx'\nimport { Uploader } from '../models'\nimport { message } from 'antd'\n\nclass HistoryStory {\n    @observable list =[]\n    @observable isLoading = false\n    @observable hasMore = true\n    @observable page = 1;\n    pagesize = 12\n\n    @action append(newList){\n        this.list = this.list.concat(newList)\n    }\n\n    @action find() {\n        this.isLoading = true\n        Uploader.select(this.page,this.pagesize).then(list=>{\n            this.append(list)\n            this.page++\n            if(list.length < this.pagesize){\n                this.hasMore = false\n            }\n        }).catch(error =>{\n            message.error('加载失败')\n        }).finally(()=>{\n            this.isLoading = false\n        })\n    }\n\n    @action reset(){\n        this.list = []\n        this.isLoading = false\n        this.page = 1\n    }\n}\n\nexport default new HistoryStory()","import { observable, action } from 'mobx';\nimport {servelApi} from '../models'\nimport userStore from './user'\nimport imageStore from './image'\nimport historyStore from './history'\n\nclass AuthStore{\n    @observable isLoading = false;\n    @observable values = {\n        username:'',\n        password:''\n    }\n    @action setUsername(username){\n        this.values.username = username\n    }\n\n    @action setPassword(password){\n        this.values.password = password\n    }\n\n    @action Login(){\n        console.log('登录中。。。')\n        this.isLoading = true\n        return new Promise((resolve,reject)=>{\n            servelApi.login(this.values.username,this.values.password)\n            .then(res=>{\n              userStore.pullUser() \n              resolve(res) \n            }).catch(error=>{\n                reject(error)\n            })\n        })\n    }\n    \n    @action register(){\n        console.log('注册中。。。')\n        this.isLoading = true\n        return new Promise((resolve,reject)=>{\n            servelApi.register(this.values.username,this.values.password).then(res=>resolve(res)).catch(error=>reject(error))\n        })\n        \n    }\n\n    @action Logout(){\n        this.isLogin = false\n        console.log('已注销')\n        servelApi.logout()\n        userStore.resetUser()\n        imageStore.reset()//首页退出清空上传图片信息\n        historyStore.reset() //历史记录进行清空\n    }\n}\n\nexport default new  AuthStore()","import { createContext, useContext} from 'react';\nimport AuthStore from './auth';\nimport userStore from './user';\nimport imageStore from './image'\nimport historyStore from './history'\n\nconst context = createContext({\n    AuthStore,\n    userStore,\n    imageStore,\n    historyStore\n})\n\nexport const useStore = () =>useContext(context)","module.exports = __webpack_public_path__ + \"static/media/logo.f99739d8.svg\";"],"sourceRoot":""}